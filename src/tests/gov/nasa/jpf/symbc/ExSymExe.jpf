target=gov.nasa.jpf.symbc.ExSymExe
#target=gov.nasa.jpf.symbc.ExSymExeSwitch
classpath=${jpf-symbc}/build/tests

sourcepath=${jpf-symbc}/src/tests

# To specify a mix of concrete and symbolic values
# symbolic.method=test2(sym#conc), test(conc#sym)
# in this configuration test2(int x, int z)
# x is symbolic while z is concrete
# test(int x, int z) x is concrete while z is symbolic
# to specify the parameter as concrete it just needs
# to be anything but "sym". So conc, con, concrete
# are all valid specifications of concrete variables

# in this particular configuration all the input
# parameters to methods test2 and test are symbolic
#symbolic.dp=no_solver
#symbolic.dp=coral
#symbolic.dp=choco2
#symbolic.dp=yices
#symbolic.dp=cvc3bitvec

symbolic.method= gov.nasa.jpf.symbc.ExSymExe.test(sym#sym)
#symbolic.method= gov.nasa.jpf.symbc.ExSymExeSwitch.test(sym)
#,gov.nasa.jpf.symbc.ExSymExe.test5(sym#sym)
#listener = gov.nasa.jpf.symbc.SymbolicListener

listener=gov.nasa.jpf.symbc.AntoniosListener
search.multiple_errors=true 

symbolic.antonio.settings=/home/cpasarea/workspace/OAE7.2b/profile
symbolic.antonio.omegaPath=/home/cpasarea/ReliabilityLibs/omega/omega_calc/obj/oc
#/home/anfi/Desktop/constraintSolvers/omega-project/omega_calc/obj/oc
symbolic.antonio.lattePath=/home/cpasarea/ReliabilityLibs/latte-integrale-1.5.3/dest/bin/count
#/home/anfi/Desktop/latte/latte-integrale-1.5.3/dest/bin/count
symbolic.antonio.tmpDir=/home/cpasarea/workspace/OAE7.2b/tmp


#symbolic.lazy=true
vm.storage.class=nil
symbolic.minint=-10000
symbolic.maxint=10000
symbolic.undefined=100000
#symbolic.debug=true
#listener = gov.nasa.jpf.symbc.sequences.SymbolicSequenceListener