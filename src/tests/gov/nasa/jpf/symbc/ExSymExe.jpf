target=gov.nasa.jpf.symbc.ExSymExe

classpath=${jpf-symbc}/build/tests

sourcepath=${jpf-symbc}/src/tests

# To specify a mix of concrete and symbolic values
# symbolic.method=test2(sym#conc), test(conc#sym)
# in this configuration test2(int x, int z)
# x is symbolic while z is concrete
# test(int x, int z) x is concrete while z is symbolic
# to specify the parameter as concrete it just needs
# to be anything but "sym". So conc, con, concrete
# are all valid specifications of concrete variables

# in this particular configuration all the input
# parameters to methods test2 and test are symbolic
#symbolic.dp=no_solver
#symbolic.dp=coral
#symbolic.dp=choco2
#symbolic.dp=yices

symbolic.method= gov.nasa.jpf.symbc.ExSymExe.test1(sym#sym)
#symbolic.method= gov.nasa.jpf.symbc.ExSymExeSwitch.test(sym)
#,gov.nasa.jpf.symbc.ExSymExe.test5(sym#sym)
#listener = gov.nasa.jpf.symbc.SymbolicListener

vm.storage.class=nil

#listener = gov.nasa.jpf.symbc.sequences.SymbolicSequenceListener