--- PCParser.java
+++ PCParser.java
@@ -37,23 +37,15 @@
 
 package gov.nasa.jpf.symbc.numeric;
 
-import gov.nasa.jpf.symbc.SymbolicInstructionFactory;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
 import gov.nasa.jpf.symbc.numeric.solvers.ProblemCoral;
 import gov.nasa.jpf.symbc.numeric.solvers.ProblemGeneral;
 
 
-
-
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.Map.Entry;
-
-
 // parses PCs
 
 public class PCParser {
@@ -64,7 +56,7 @@
 	  static int tempVars = 0; //Used to construct "or" clauses
 
 	  //	 Converts IntegerExpression's into DP's IntExp's
-	  static Object getExpression(IntegerExpression eRef) {
+	  static Object getExpression(final IntegerExpression eRef) {
 			assert eRef != null;
 			assert !(eRef instanceof IntegerConstant);
 			
@@ -204,7 +196,7 @@
 
 
 	// Converts RealExpression's into DP RealExp's
-	static Object getExpression(RealExpression eRef) {
+	static Object getExpression(final RealExpression eRef) {
 		assert eRef != null;
 		assert !(eRef instanceof RealConstant);
 
@@ -288,6 +280,7 @@
 			e_arg1Ref = ((MathRealExpression)eRef).arg1;
 			e_arg2Ref = ((MathRealExpression)eRef).arg2;
 			switch(funRef){
+			case ABS: return pb.abs(getExpression(e_arg1Ref)); //Added for dReal by Nima
 			case SIN: return pb.sin(getExpression(e_arg1Ref));
 			case COS: return pb.cos(getExpression(e_arg1Ref));
 			case EXP: return pb.exp(getExpression(e_arg1Ref));
@@ -329,11 +322,11 @@
 	//}
 
 
-	static public boolean createDPMixedConstraint(MixedConstraint cRef) { // TODO
+	static public boolean createDPMixedConstraint(final MixedConstraint cRef) { // TODO
 
-		Comparator c_compRef = cRef.getComparator();
-		RealExpression c_leftRef = (RealExpression)cRef.getLeft();
-		IntegerExpression c_rightRef = (IntegerExpression)cRef.getRight();
+		final Comparator c_compRef = cRef.getComparator();
+		final RealExpression c_leftRef = (RealExpression)cRef.getLeft();
+		final IntegerExpression c_rightRef = (IntegerExpression)cRef.getRight();
 		assert (c_compRef == Comparator.EQ);
 
 		if (c_leftRef instanceof SymbolicReal && c_rightRef instanceof SymbolicInteger) {
@@ -341,7 +334,7 @@
 			pb.post(pb.mixed(getExpression(c_leftRef),getExpression(c_rightRef)));
 		}
 		else if (c_leftRef instanceof SymbolicReal) { // c_rightRef is an IntegerExpression
-			Object tmpi = pb.makeIntVar(c_rightRef + "_" + c_rightRef.hashCode(),(int)(((SymbolicReal)c_leftRef)._min), (int)(((SymbolicReal)c_leftRef)._max));
+			final Object tmpi = pb.makeIntVar(c_rightRef + "_" + c_rightRef.hashCode(),(int)(((SymbolicReal)c_leftRef)._min), (int)(((SymbolicReal)c_leftRef)._max));
 			if (c_rightRef instanceof IntegerConstant)
 				pb.post(pb.eq(((IntegerConstant)c_rightRef).value,tmpi));
 			else
@@ -351,7 +344,7 @@
 
 		}
 		else if (c_rightRef instanceof SymbolicInteger) { // c_leftRef is a RealExpression
-			Object tmpr = pb.makeRealVar(c_leftRef + "_" + c_leftRef.hashCode(), ((SymbolicInteger)c_rightRef)._min, ((SymbolicInteger)c_rightRef)._max);
+			final Object tmpr = pb.makeRealVar(c_leftRef + "_" + c_leftRef.hashCode(), ((SymbolicInteger)c_rightRef)._min, ((SymbolicInteger)c_rightRef)._max);
 			if(c_leftRef instanceof RealConstant)
 				pb.post(pb.eq(tmpr, ((RealConstant)c_leftRef).value));
 			else
@@ -365,11 +358,11 @@
 		return true;
 	}
 
-	static public boolean createDPRealConstraint(RealConstraint cRef) {
+	static public boolean createDPRealConstraint(final RealConstraint cRef) {
 
-		Comparator c_compRef = cRef.getComparator();
-		RealExpression c_leftRef = (RealExpression)cRef.getLeft();
-		RealExpression c_rightRef = (RealExpression)cRef.getRight();
+		final Comparator c_compRef = cRef.getComparator();
+		final RealExpression c_leftRef = (RealExpression)cRef.getLeft();
+		final RealExpression c_rightRef = (RealExpression)cRef.getRight();
 
 		switch(c_compRef){
 		case EQ:
@@ -473,13 +466,13 @@
 	}
 
 	//Added by Gideon, to handle CNF style constraints??? 
-	static public boolean createDPLinearOrIntegerConstraint (LogicalORLinearIntegerConstraints c) {
-		List<Object> orList = new ArrayList<Object>();
+	static public boolean createDPLinearOrIntegerConstraint (final LogicalORLinearIntegerConstraints c) {
+		final List<Object> orList = new ArrayList<Object>();
 
-		for (LinearIntegerConstraint cRef: c.getList()) {
-			Comparator c_compRef = cRef.getComparator();
-			IntegerExpression c_leftRef = (IntegerExpression)cRef.getLeft();
-			IntegerExpression c_rightRef = (IntegerExpression)cRef.getRight();
+		for (final LinearIntegerConstraint cRef: c.getList()) {
+			final Comparator c_compRef = cRef.getComparator();
+			final IntegerExpression c_leftRef = (IntegerExpression)cRef.getLeft();
+			final IntegerExpression c_rightRef = (IntegerExpression)cRef.getRight();
 			//Removed all return false: why?
 			switch(c_compRef){
 			case EQ:
@@ -488,23 +481,23 @@
 						return true;
 				}
 				else if (c_leftRef instanceof IntegerConstant) {
-					Object part1 = getExpression(c_rightRef);
-					Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
+					final Object part1 = getExpression(c_rightRef);
+					final Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
 					pb.post(pb.eq(tempVar, part1));
-					Object cc = pb.eq(((IntegerConstant)c_leftRef).value, tempVar);
+					final Object cc = pb.eq(((IntegerConstant)c_leftRef).value, tempVar);
 					orList.add(cc);
 				}
 				else if (c_rightRef instanceof IntegerConstant) {
-					Object part1 = getExpression(c_leftRef);
-					Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt(""));
+					final Object part1 = getExpression(c_leftRef);
+					final Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt(""));
 					pb.post(pb.eq(tempVar, part1)); tempVars++;
 					orList.add(pb.eq(tempVar,((IntegerConstant)c_rightRef).value));
 				}
 				else {
-					Object part1 = getExpression(c_leftRef);
-					Object part2 = getExpression(c_rightRef);
-					Object tempVar1 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
-					Object tempVar2 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
+					final Object part1 = getExpression(c_leftRef);
+					final Object part2 = getExpression(c_rightRef);
+					final Object tempVar1 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
+					final Object tempVar2 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
 					pb.post(pb.eq(tempVar1, part1));
 					pb.post(pb.eq(tempVar2, part2));
 					orList.add(pb.eq(tempVar1,tempVar2));
@@ -516,23 +509,23 @@
 						return true;
 				}
 				else if (c_leftRef instanceof IntegerConstant) {
-					Object part1 = getExpression(c_rightRef);
-					Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
+					final Object part1 = getExpression(c_rightRef);
+					final Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
 					pb.post(pb.eq(tempVar, part1));
-					Object cc = pb.neq(((IntegerConstant)c_leftRef).value, tempVar);
+					final Object cc = pb.neq(((IntegerConstant)c_leftRef).value, tempVar);
 					orList.add(cc);
 				}
 				else if (c_rightRef instanceof IntegerConstant) {
-					Object part1 = getExpression(c_leftRef);
-					Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt(""));
+					final Object part1 = getExpression(c_leftRef);
+					final Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt(""));
 					pb.post(pb.eq(tempVar, part1)); tempVars++;
 					orList.add(pb.neq(tempVar,((IntegerConstant)c_rightRef).value));
 				}
 				else {
-					Object part1 = getExpression(c_leftRef);
-					Object part2 = getExpression(c_rightRef);
-					Object tempVar1 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
-					Object tempVar2 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
+					final Object part1 = getExpression(c_leftRef);
+					final Object part2 = getExpression(c_rightRef);
+					final Object tempVar1 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
+					final Object tempVar2 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
 					pb.post(pb.eq(tempVar1, part1));
 					pb.post(pb.eq(tempVar2, part2));
 					orList.add(pb.neq(tempVar1,tempVar2));
@@ -544,23 +537,23 @@
 						return true;
 				}
 				else if (c_leftRef instanceof IntegerConstant) {
-					Object part1 = getExpression(c_rightRef);
-					Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
+					final Object part1 = getExpression(c_rightRef);
+					final Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
 					pb.post(pb.eq(tempVar, part1));
-					Object cc = pb.lt(((IntegerConstant)c_leftRef).value, tempVar);
+					final Object cc = pb.lt(((IntegerConstant)c_leftRef).value, tempVar);
 					orList.add(cc);
 				}
 				else if (c_rightRef instanceof IntegerConstant) {
-					Object part1 = getExpression(c_leftRef);
-					Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt(""));
+					final Object part1 = getExpression(c_leftRef);
+					final Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt(""));
 					pb.post(pb.eq(tempVar, part1)); tempVars++;
 					orList.add(pb.lt(tempVar,((IntegerConstant)c_rightRef).value));
 				}
 				else {
-					Object part1 = getExpression(c_leftRef);
-					Object part2 = getExpression(c_rightRef);
-					Object tempVar1 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
-					Object tempVar2 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
+					final Object part1 = getExpression(c_leftRef);
+					final Object part2 = getExpression(c_rightRef);
+					final Object tempVar1 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
+					final Object tempVar2 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
 					pb.post(pb.eq(tempVar1, part1));
 					pb.post(pb.eq(tempVar2, part2));
 					orList.add(pb.lt(tempVar1,tempVar2));
@@ -572,23 +565,23 @@
 						return true;
 				}
 				else if (c_leftRef instanceof IntegerConstant) {
-					Object part1 = getExpression(c_rightRef);
-					Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
+					final Object part1 = getExpression(c_rightRef);
+					final Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
 					pb.post(pb.eq(tempVar, part1));
-					Object cc = pb.geq(((IntegerConstant)c_leftRef).value, tempVar);
+					final Object cc = pb.geq(((IntegerConstant)c_leftRef).value, tempVar);
 					orList.add(cc);
 				}
 				else if (c_rightRef instanceof IntegerConstant) {
-					Object part1 = getExpression(c_leftRef);
-					Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt(""));
+					final Object part1 = getExpression(c_leftRef);
+					final Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt(""));
 					pb.post(pb.eq(tempVar, part1)); tempVars++;
 					orList.add(pb.geq(tempVar,((IntegerConstant)c_rightRef).value));
 				}
 				else {
-					Object part1 = getExpression(c_leftRef);
-					Object part2 = getExpression(c_rightRef);
-					Object tempVar1 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
-					Object tempVar2 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
+					final Object part1 = getExpression(c_leftRef);
+					final Object part2 = getExpression(c_rightRef);
+					final Object tempVar1 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
+					final Object tempVar2 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
 					pb.post(pb.eq(tempVar1, part1));
 					pb.post(pb.eq(tempVar2, part2));
 					orList.add(pb.geq(tempVar1,tempVar2));
@@ -600,23 +593,23 @@
 						return true;
 				}
 				else if (c_leftRef instanceof IntegerConstant) {
-					Object part1 = getExpression(c_rightRef);
-					Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
+					final Object part1 = getExpression(c_rightRef);
+					final Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
 					pb.post(pb.eq(tempVar, part1));
-					Object cc = pb.leq(((IntegerConstant)c_leftRef).value, tempVar);
+					final Object cc = pb.leq(((IntegerConstant)c_leftRef).value, tempVar);
 					orList.add(cc);
 				}
 				else if (c_rightRef instanceof IntegerConstant) {
-					Object part1 = getExpression(c_leftRef);
-					Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt(""));
+					final Object part1 = getExpression(c_leftRef);
+					final Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt(""));
 					pb.post(pb.eq(tempVar, part1)); tempVars++;
 					orList.add(pb.leq(tempVar,((IntegerConstant)c_rightRef).value));
 				}
 				else {
-					Object part1 = getExpression(c_leftRef);
-					Object part2 = getExpression(c_rightRef);
-					Object tempVar1 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
-					Object tempVar2 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
+					final Object part1 = getExpression(c_leftRef);
+					final Object part2 = getExpression(c_rightRef);
+					final Object tempVar1 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
+					final Object tempVar2 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
 					pb.post(pb.eq(tempVar1, part1));
 					pb.post(pb.eq(tempVar2, part2));
 					orList.add(pb.leq(tempVar1,tempVar2));
@@ -628,23 +621,23 @@
 						return true;
 				}
 				else if (c_leftRef instanceof IntegerConstant) {
-					Object part1 = getExpression(c_rightRef);
-					Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
+					final Object part1 = getExpression(c_rightRef);
+					final Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
 					pb.post(pb.eq(tempVar, part1));
-					Object cc = pb.gt(((IntegerConstant)c_leftRef).value, tempVar);
+					final Object cc = pb.gt(((IntegerConstant)c_leftRef).value, tempVar);
 					orList.add(cc);
 				}
 				else if (c_rightRef instanceof IntegerConstant) {
-					Object part1 = getExpression(c_leftRef);
-					Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt(""));
+					final Object part1 = getExpression(c_leftRef);
+					final Object tempVar = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt(""));
 					pb.post(pb.eq(tempVar, part1)); tempVars++;
 					orList.add(pb.gt(tempVar,((IntegerConstant)c_rightRef).value));
 				}
 				else {
-					Object part1 = getExpression(c_leftRef);
-					Object part2 = getExpression(c_rightRef);
-					Object tempVar1 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
-					Object tempVar2 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
+					final Object part1 = getExpression(c_leftRef);
+					final Object part2 = getExpression(c_rightRef);
+					final Object tempVar1 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
+					final Object tempVar2 = pb.makeIntVar("mytemp" + tempVars, MinMax.getVarMinInt(""), MinMax.getVarMaxInt("")); tempVars++;
 					pb.post(pb.eq(tempVar1, part1));
 					pb.post(pb.eq(tempVar2, part2));
 					orList.add(pb.gt(tempVar1,tempVar2));
@@ -654,7 +647,7 @@
 		}
 		//System.out.println("[SymbolicConstraintsGeneral] orList: " + orList.toString());
 		if (orList.size() == 0) return true;
-		Object constraint_array[] = new Object[orList.size()];
+		final Object constraint_array[] = new Object[orList.size()];
 		orList.toArray(constraint_array);
 
 		pb.postLogicalOR(constraint_array);
@@ -663,12 +656,12 @@
 
 	}
 
-	static public boolean createDPLinearIntegerConstraint(LinearIntegerConstraint cRef) {
+	static public boolean createDPLinearIntegerConstraint(final LinearIntegerConstraint cRef) {
 
-		Comparator c_compRef = cRef.getComparator();
+		final Comparator c_compRef = cRef.getComparator();
 
-		IntegerExpression c_leftRef = (IntegerExpression)cRef.getLeft();
-		IntegerExpression c_rightRef = (IntegerExpression)cRef.getRight();
+		final IntegerExpression c_leftRef = (IntegerExpression)cRef.getLeft();
+		final IntegerExpression c_rightRef = (IntegerExpression)cRef.getRight();
 
 		switch(c_compRef){
 		case EQ:
@@ -771,12 +764,12 @@
 		return true;
 	}
 
-	static public boolean createDPNonLinearIntegerConstraint(NonLinearIntegerConstraint cRef) {
+	static public boolean createDPNonLinearIntegerConstraint(final NonLinearIntegerConstraint cRef) {
 
-		Comparator c_compRef = cRef.getComparator();
+		final Comparator c_compRef = cRef.getComparator();
 
-		IntegerExpression c_leftRef = (IntegerExpression)cRef.getLeft();
-		IntegerExpression c_rightRef = (IntegerExpression)cRef.getRight();
+		final IntegerExpression c_leftRef = (IntegerExpression)cRef.getLeft();
+		final IntegerExpression c_rightRef = (IntegerExpression)cRef.getRight();
 
 		switch(c_compRef){
 		case EQ:
@@ -881,7 +874,7 @@
 	//static Map<String,Boolean> dpMap = new HashMap<String,Boolean>();
 
 	// result is in pb
-	public static ProblemGeneral parse(PathCondition pc, ProblemGeneral pbtosolve) {
+	public static ProblemGeneral parse(final PathCondition pc, final ProblemGeneral pbtosolve) {
 		pb=pbtosolve;
 		
 		
